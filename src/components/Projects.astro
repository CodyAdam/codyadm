---
import EmojionePencil from './ico/EmojionePencil';
import ProjectCard, { Project, Size } from './ProjectCard.astro';
import ProjectFilter from './ProjectFilter';

let projects = await Astro.glob<Project>('../pages/projects/*.md');
projects = projects.filter((p) => !p.frontmatter.hide);
---

<div class='flex justify-center px-10 md:px-20 md:mx-20 pt-10 md:pt-20' id='projects'>
  <div class='container flex flex-col justify-center items-center'>
    <ProjectFilter client:idle />
    <div class='flex pt-[14rem]'>
      <div
        class='h-[calc(100%+10rem)] -translate-y-[5rem] w-[3px] -z-20 relative rounded-full bg-gradient-to-t from-purple-600/0 to-yellow-400 py-20 via-red-400/70 glow-timeline'
      >
        <div class='absolute top-0 left-[30%] -translate-y-[96%]'>
          <EmojionePencil className='w-16 animate-drawing-rotation text-yellow-400 h-16' />
        </div>
      </div>
      <div
        class='flex grow container flex-col w-full gap-20 md:gap-20 items-start justify-between pl-[3rem] sm:pl-[8rem] max-w-6xl'
      >
        {
          projects
            .sort((a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime())
            .map((project, i) => {
              let size: Size = 'sm';
              switch (project.frontmatter.value) {
                case 1:
                  size = 'sm';
                  break;
                case 2:
                  size = 'md';
                  break;
                case 3:
                  size = 'lg';
                  break;
                case 4:
                  size = 'xl';
                  break;
              }
              return <ProjectCard project={project} size={size} />;
            })
        }
      </div>
    </div>
  </div>
</div>
